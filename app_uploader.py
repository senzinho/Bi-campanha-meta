import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# T√≠tulo fixo do painel
st.title("Painel de Campanhas Nanovit")

# Fun√ß√£o para carregar e pr√©-processar os dados
@st.cache_data
def carregar_dados(file):
    df = pd.read_csv(file)
    df['In√≠cio dos relat√≥rios'] = pd.to_datetime(df['In√≠cio dos relat√≥rios'], format='%Y-%m-%d')
    df['T√©rmino dos relat√≥rios'] = pd.to_datetime(df['T√©rmino dos relat√≥rios'], format='%Y-%m-%d')
    return df

# ‚Äî‚Äî‚Äî Upload do CSV ‚Äî‚Äî‚Äî
uploaded_file = st.sidebar.file_uploader(
    "Envie o CSV de Campanhas (ex.: 1 a 25 de jun)", 
    type="csv"
)
if not uploaded_file:
    st.warning("Por favor, envie o arquivo CSV na barra lateral.")
    st.stop()

# Carrega o CSV enviado
df = carregar_dados(uploaded_file)

# Detecta e exibe o per√≠odo real do relat√≥rio
data_inicio = df['In√≠cio dos relat√≥rios'].min().strftime('%d/%m/%Y')
data_fim = df['T√©rmino dos relat√≥rios'].max().strftime('%d/%m/%Y')
st.subheader(f"Per√≠odo: {data_inicio} a {data_fim}")

# ‚Äî‚Äî‚Äî Sidebar de filtros ‚Äî‚Äî‚Äî
st.sidebar.header("Filtros")
campanhas = st.sidebar.multiselect(
    "Campanhas",
    options=df['Nome da campanha'].unique(),
    default=df['Nome da campanha'].unique()
)
status = st.sidebar.multiselect(
    "Status de veicula√ß√£o",
    options=df['Veicula√ß√£o da campanha'].unique(),
    default=df['Veicula√ß√£o da campanha'].unique()
)

# Aplica filtros
df_filtrado = df[
    df['Nome da campanha'].isin(campanhas) &
    df['Veicula√ß√£o da campanha'].isin(status)
]

# ‚Äî‚Äî‚Äî Download CSV filtrado ‚Äî‚Äî‚Äî
st.subheader("Download dos Dados Filtrados")
csv_bytes = df_filtrado.to_csv(index=False).encode('utf-8')
st.download_button(
    label="üì• Baixar CSV",
    data=csv_bytes,
    file_name=f"campanhas_{data_inicio.replace('/','')}_{data_fim.replace('/','')}.csv",
    mime="text/csv"
)

# ‚Äî‚Äî‚Äî Gr√°ficos com as colunas atuais ‚Äî‚Äî‚Äî

# 1. Or√ßamento por campanha
st.subheader("Or√ßamento do Conjunto de An√∫ncios")
orcamento = df_filtrado.set_index('Nome da campanha')['Or√ßamento do conjunto de an√∫ncios']
st.bar_chart(orcamento)

# 2. Resultados por campanha
st.subheader("Resultados por campanha")
resultados = df_filtrado.set_index('Nome da campanha')['Resultados']
st.bar_chart(resultados)

# 3. Alcance vs Impress√µes
st.subheader("Alcance √ó Impress√µes")
alc_imp = df_filtrado.set_index('Nome da campanha')[['Alcance', 'Impress√µes']]
st.line_chart(alc_imp)

# 4. Custo por Resultado vs Valor Usado
st.subheader("Custo por Resultado vs Valor Usado")
fig, ax = plt.subplots()
ax.scatter(
    df_filtrado['Custo por resultados'],
    df_filtrado['Valor usado (BRL)'],
    s=80,
    alpha=0.7
)
ax.set_xlabel("Custo por Resultado (R$)")
ax.set_ylabel("Valor Usado (R$)")
ax.grid(True, linestyle='--', alpha=0.5)
st.pyplot(fig)

# Rodap√©
st.markdown("---")
st.markdown("üë§ Desenvolvido por Heliusen - Consultoria E-commerce S√£o Jos√©")
